package telegram

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/nikitagorchakov/finance-hub/backend/db"
	"github.com/nikitagorchakov/finance-hub/backend/models"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
type Bot struct {
	api            *tgbotapi.BotAPI
	config         *BotConfig
	userStates     map[int64]*UserState
	commandHandler map[string]CommandHandler
}

// UserState —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥–µ
type UserState struct {
	Stage       DialogStage
	UserID      uint
	Amount      float64
	Description string
	CategoryID  uint
	Categories  []models.Category
}

// DialogStage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
type DialogStage int

const (
	StageNone DialogStage = iota
	StageWaitAmount
	StageWaitCategory
	StageWaitDescription
	StageConfirm
)

// CommandHandler –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
type CommandHandler func(bot *Bot, message *tgbotapi.Message, state *UserState) error

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(config *BotConfig) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(config.Token)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %w", err)
	}

	bot.Debug = config.Debug
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	b := &Bot{
		api:        bot,
		config:     config,
		userStates: make(map[int64]*UserState),
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
	b.commandHandler = map[string]CommandHandler{
		"start":      handleStart,
		"help":       handleHelp,
		"add":        handleAdd,
		"categories": handleCategories,
	}

	return b, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallback(update.CallbackQuery)
		}
	}

	return nil
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID
	log.Printf("[%s] %s", message.From.UserName, message.Text)

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	state, exists := b.userStates[userID]
	if !exists {
		state = &UserState{
			Stage: StageNone,
		}
		b.userStates[userID] = state
	}

	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
	if message.IsCommand() {
		command := message.Command()
		handler, ok := b.commandHandler[command]
		
		if !ok {
			b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
			return
		}
		
		err := handler(b, message, state)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã %s: %v", command, err)
			b.sendMessage(message.Chat.ID, fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %v", err))
		}
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	if message.Text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é" {
		err := handleAdd(b, message, state)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: %v", err)
			b.sendMessage(message.Chat.ID, fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %v", err))
		}
		return
	} else if message.Text == "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏" {
		err := handleCategories(b, message, state)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: %v", err)
			b.sendMessage(message.Chat.ID, fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %v", err))
		}
		return
	} else if message.Text == "‚ùì –ü–æ–º–æ—â—å" {
		err := handleHelp(b, message, state)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å: %v", err)
			b.sendMessage(message.Chat.ID, fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %v", err))
		}
		return
	} else if message.Text == "‚ùå –û—Ç–º–µ–Ω–∞" {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
		state.Stage = StageNone
		b.sendMessage(message.Chat.ID, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
	switch state.Stage {
	case StageWaitAmount:
		b.handleAmountInput(message, state)
	case StageWaitCategory:
		// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏, –Ω–æ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
		b.sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:")
		b.sendCategoriesKeyboard(message.Chat.ID, state)
	case StageWaitDescription:
		b.handleDescriptionInput(message, state)
	case StageConfirm:
		b.handleConfirmation(message, state)
	default:
		// –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"),
				tgbotapi.NewKeyboardButton("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
			),
		)
		
		msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
		msg.ReplyMarkup = keyboard
		
		_, err := b.api.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: %v", err)
		}
	}
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state, exists := b.userStates[userID]
	
	if !exists {
		b.sendMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add")
		return
	}

	// –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
	parts := strings.Split(callback.Data, ":")
	action := parts[0]

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
	if action == "cancel" {
		b.handleCancellation(callback.Message.Chat.ID, state)
		
		// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
		callbackResponse := tgbotapi.NewCallback(callback.ID, "")
		b.api.Request(callbackResponse)
		return
	}
	
	if len(parts) != 2 {
		b.sendMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
		return
	}

	switch action {
	case "cat":
		// –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
		categoryID, err := strconv.ParseUint(parts[1], 10, 32)
		if err != nil {
			b.sendMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
			return
		}

		// –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
		var selectedCategory models.Category
		for _, cat := range state.Categories {
			if cat.ID == uint(categoryID) {
				selectedCategory = cat
				break
			}
		}

		state.CategoryID = uint(categoryID)
		state.Stage = StageWaitDescription

		// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
		callbackResponse := tgbotapi.NewCallback(callback.ID, "")
		b.api.Request(callbackResponse)

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
			),
		)
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, 
			fmt.Sprintf("–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:", selectedCategory.Name))
		msg.ReplyMarkup = keyboard
		
		_, err = b.api.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}

	case "confirm":
		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		result := parts[1]
		if result == "yes" {
			err := b.createTransaction(callback.Message.Chat.ID, state)
			if err != nil {
				b.sendMessage(callback.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err))
			} else {
				// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
				keyboard := tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"),
						tgbotapi.NewKeyboardButton("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
					),
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
					),
				)
				
				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
				msg.ReplyMarkup = keyboard
				
				_, err = b.api.Send(msg)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				}
				
				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
				state.Stage = StageNone
			}
		} else {
			b.handleCancellation(callback.Message.Chat.ID, state)
		}

		// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
		callbackResponse := tgbotapi.NewCallback(callback.ID, "")
		b.api.Request(callbackResponse)
	}
}

// handleAmountInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã
func (b *Bot) handleAmountInput(message *tgbotapi.Message, state *UserState) {
	amount, err := strconv.ParseFloat(message.Text, 64)
	if err != nil || amount <= 0 {
		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
			),
		)
		
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
		msg.ReplyMarkup = keyboard
		
		_, err := b.api.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	state.Amount = amount
	state.Stage = StageWaitCategory

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var categories []models.Category
	if err := db.DB.Where("user_id = ?", state.UserID).Find(&categories).Error; err != nil {
		b.sendMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: %v", err))
		state.Stage = StageNone
		return
	}

	if len(categories) == 0 {
		// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"),
				tgbotapi.NewKeyboardButton("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
			),
		)
		
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
		msg.ReplyMarkup = keyboard
		
		_, err := b.api.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		
		state.Stage = StageNone
		return
	}

	state.Categories = categories
	b.sendMessage(message.Chat.ID, fmt.Sprintf("–í–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞: %.2f\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", amount))
	b.sendCategoriesKeyboard(message.Chat.ID, state)
}

// handleDescriptionInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
func (b *Bot) handleDescriptionInput(message *tgbotapi.Message, state *UserState) {
	description := message.Text
	if description == "-" {
		description = ""
	}

	state.Description = description
	state.Stage = StageConfirm

	// –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	var categoryName string
	for _, cat := range state.Categories {
		if cat.ID == state.CategoryID {
			categoryName = cat.Name
			break
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	confirmMessage := fmt.Sprintf(
		"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n–°—É–º–º–∞: %.2f\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n\n–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?",
		state.Amount, categoryName, state.Description,
	)

	b.sendConfirmKeyboard(message.Chat.ID, confirmMessage)
}

// handleConfirmation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞)
func (b *Bot) handleConfirmation(message *tgbotapi.Message, state *UserState) {
	text := strings.ToLower(message.Text)
	if text == "–¥–∞" || text == "yes" || text == "y" {
		err := b.createTransaction(message.Chat.ID, state)
		if err != nil {
			b.sendMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err))
		} else {
			b.sendMessage(message.Chat.ID, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
		}
	} else {
		b.sendMessage(message.Chat.ID, "–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state.Stage = StageNone
}

// sendCategoriesKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
func (b *Bot) sendCategoriesKeyboard(chatID int64, state *UserState) {
	var keyboard [][]tgbotapi.InlineKeyboardButton
	
	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É (—Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã)
	var expenseCategories []models.Category
	var incomeCategories []models.Category
	
	for _, cat := range state.Categories {
		if cat.Type == models.Expense {
			expenseCategories = append(expenseCategories, cat)
		} else {
			incomeCategories = append(incomeCategories, cat)
		}
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
	if len(expenseCategories) > 0 {
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üì• –†–ê–°–•–û–î–´", "header:expense"),
		})
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ 2 –≤ —Ä—è–¥
		for i := 0; i < len(expenseCategories); i += 2 {
			var row []tgbotapi.InlineKeyboardButton
			row = append(row, tgbotapi.NewInlineKeyboardButtonData(
				expenseCategories[i].Name, 
				fmt.Sprintf("cat:%d", expenseCategories[i].ID),
			))
			
			if i+1 < len(expenseCategories) {
				row = append(row, tgbotapi.NewInlineKeyboardButtonData(
					expenseCategories[i+1].Name, 
					fmt.Sprintf("cat:%d", expenseCategories[i+1].ID),
				))
			}
			
			keyboard = append(keyboard, row)
		}
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
	if len(incomeCategories) > 0 {
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üì§ –î–û–•–û–î–´", "header:income"),
		})
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤ –ø–æ 2 –≤ —Ä—è–¥
		for i := 0; i < len(incomeCategories); i += 2 {
			var row []tgbotapi.InlineKeyboardButton
			row = append(row, tgbotapi.NewInlineKeyboardButtonData(
				incomeCategories[i].Name, 
				fmt.Sprintf("cat:%d", incomeCategories[i].ID),
			))
			
			if i+1 < len(incomeCategories) {
				row = append(row, tgbotapi.NewInlineKeyboardButtonData(
					incomeCategories[i+1].Name, 
					fmt.Sprintf("cat:%d", incomeCategories[i+1].ID),
				))
			}
			
			keyboard = append(keyboard, row)
		}
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel"),
	})
	
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	
	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: %v", err)
	}
}

// sendConfirmKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
func (b *Bot) sendConfirmKeyboard(chatID int64, text string) {
	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm:yes"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "confirm:no"),
		},
	}
	
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	
	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %v", err)
	}
}

// createTransaction —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
func (b *Bot) createTransaction(chatID int64, state *UserState) error {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 12:00 —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
	now := time.Now()
	date := time.Date(now.Year(), now.Month(), now.Day(), 12, 0, 0, 0, time.UTC)

	transaction := models.Transaction{
		Amount:      state.Amount,
		Description: state.Description,
		Date:        date,
		CategoryID:  state.CategoryID,
		UserID:      state.UserID,
	}

	if err := db.DB.Create(&transaction).Error; err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
	}

	return nil
}

// findUserByTelegramChatID –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —á–∞—Ç–∞ –≤ Telegram
func (b *Bot) findUserByTelegramChatID(chatID int64) (*models.User, error) {
	var user models.User
	
	if err := db.DB.Where("telegram_chat_id = ?", strconv.FormatInt(chatID, 10)).First(&user).Error; err != nil {
		return nil, fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %w", err)
	}
	
	return &user, nil
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// handleCancellation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
func (b *Bot) handleCancellation(chatID int64, state *UserState) {
	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"),
			tgbotapi.NewKeyboardButton("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
		),
	)
	
	msg := tgbotapi.NewMessage(chatID, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.")
	msg.ReplyMarkup = keyboard
	
	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state.Stage = StageNone
}

// SendNotificationMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ chat ID
func (b *Bot) SendNotificationMessage(userChatID string, text string) error {
	if userChatID == "" {
		return nil // –ï—Å–ª–∏ chat ID –Ω–µ –∑–∞–¥–∞–Ω, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
	}

	chatID, err := strconv.ParseInt(userChatID, 10, 64)
	if err != nil {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π chat ID: %w", err)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	_, err = b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %w", err)
	}

	return nil
} 