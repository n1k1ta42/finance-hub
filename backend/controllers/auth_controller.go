package controllers

import (
	"math"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/nikitagorchakov/finance-hub/backend/config"
	"github.com/nikitagorchakov/finance-hub/backend/db"
	"github.com/nikitagorchakov/finance-hub/backend/middlewares"
	"github.com/nikitagorchakov/finance-hub/backend/models"
	"github.com/nikitagorchakov/finance-hub/backend/utils"
)

// AuthController –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
type AuthController struct {
	Config *config.Config
}

// NewAuthController —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
func NewAuthController(config *config.Config) *AuthController {
	return &AuthController{Config: config}
}

// Register —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (a *AuthController) Register(c *fiber.Ctx) error {
	var input models.RegisterDTO

	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
			"error":   err.Error(),
		})
	}

	errors := utils.ValidateStruct(input)
	if len(errors) > 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "error",
			"errors": errors,
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
	var existingUser models.User
	result := db.DB.Where("email = ?", input.Email).First(&existingUser)
	if result.RowsAffected > 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
		})
	}

	// –®–∏—Ñ—Ä—É–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
	encFirst, err := utils.EncryptString(input.FirstName)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏",
			"error":   err.Error(),
		})
	}
	encLast, err := utils.EncryptString(input.LastName)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏",
			"error":   err.Error(),
		})
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := models.User{
		Email:     input.Email,
		Password:  input.Password,
		FirstName: encFirst,
		LastName:  encLast,
	}

	if err := db.DB.Create(&user).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			"error":   err.Error(),
		})
	}

	// –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
	user.FirstName, _ = utils.DecryptString(user.FirstName)
	user.LastName, _ = utils.DecryptString(user.LastName)

	// –°–æ–∑–¥–∞–µ–º –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—É—é –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	features := strings.Join(models.PlanFeatures[models.Basic], ", ")
	subscription := models.Subscription{
		UserID:    user.ID,
		Plan:      models.Basic,
		Period:    models.LifetimeSubscription,
		StartDate: time.Now(),
		EndDate:   nil, // –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
		Active:    true,
		Price:     0, // –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –±–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
		Features:  features,
	}

	if err := db.DB.Create(&subscription).Error; err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
		// –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
	} else {
		// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
		notification := models.Notification{
			UserID:     user.ID,
			Type:       models.NotificationSubscription,
			Title:      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
			Message:    "–í–∞–º –≤—ã–¥–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è –±–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
			Importance: models.NotificationNormal,
			IsRead:     false,
		}

		db.DB.Create(&notification)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π JWT access —Ç–æ–∫–µ–Ω
	accessToken, err := utils.GenerateAccessToken(user.ID, user.Email, user.Role, a.Config)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞",
			"error":   err.Error(),
		})
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh —Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	refreshToken, expiresAt, err := utils.GenerateRefreshToken(user.ID)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å refresh —Ç–æ–∫–µ–Ω",
			"error":   err.Error(),
		})
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º access —Ç–æ–∫–µ–Ω –≤ httpOnly cookie
	c.Cookie(&fiber.Cookie{
		Name:     "access_token",
		Value:    accessToken,
		Path:     "/",
		MaxAge:   15 * 60, // 15 –º–∏–Ω—É—Ç
		Secure:   a.Config.Env != "development",
		HTTPOnly: true,
		SameSite: "Strict",
	})

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh —Ç–æ–∫–µ–Ω –≤ httpOnly cookie
	c.Cookie(&fiber.Cookie{
		Name:     "refresh_token",
		Value:    refreshToken,
		Path:     "/",
		MaxAge:   int(time.Until(expiresAt).Seconds()),
		Secure:   a.Config.Env != "development",
		HTTPOnly: true,
		SameSite: "Strict",
	})

	return c.Status(fiber.StatusCreated).JSON(fiber.Map{
		"status":  "success",
		"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
		"data": fiber.Map{
			"user": user.ToUserResponse(),
		},
	})
}

// Login –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (a *AuthController) Login(c *fiber.Ctx) error {
	var input models.LoginDTO

	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
			"error":   err.Error(),
		})
	}

	errors := utils.ValidateStruct(input)
	if len(errors) > 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "error",
			"errors": errors,
		})
	}

	// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	var user models.User
	result := db.DB.Where("email = ?", input.Email).First(&user)
	if result.RowsAffected == 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
	if err := user.ComparePassword(input.Password); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
		})
	}

	// –î–µ—à–∏—Ñ—Ä—É–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	firstName, _ := utils.DecryptString(user.FirstName)
	lastName, _ := utils.DecryptString(user.LastName)
	user.FirstName = firstName
	user.LastName = lastName

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞
	ip := c.IP()
	userAgent := c.Get("User-Agent")
	loginHistory := models.UserLoginHistory{
		UserID:    user.ID,
		IP:        ip,
		UserAgent: userAgent,
		CreatedAt: time.Now(),
	}
	db.DB.Create(&loginHistory)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
	loginTime := time.Now().Format("2006-01-02 15:04:05")
	msg := "üîê –ù–æ–≤—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç\n" +
		"Email: " + user.Email + "\n" +
		"–ò–º—è: " + firstName + "\n" +
		"–§–∞–º–∏–ª–∏—è: " + lastName + "\n" +
		"IP: " + ip + "\n" +
		"User-Agent: " + userAgent + "\n" +
		"–í—Ä–µ–º—è: " + loginTime
	utils.SendTelegramMessage(msg)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π JWT access —Ç–æ–∫–µ–Ω
	accessToken, err := utils.GenerateAccessToken(user.ID, user.Email, user.Role, a.Config)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞",
			"error":   err.Error(),
		})
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh —Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	refreshToken, expiresAt, err := utils.GenerateRefreshToken(user.ID)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å refresh —Ç–æ–∫–µ–Ω",
			"error":   err.Error(),
		})
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º access —Ç–æ–∫–µ–Ω –≤ httpOnly cookie
	c.Cookie(&fiber.Cookie{
		Name:     "access_token",
		Value:    accessToken,
		Path:     "/",
		MaxAge:   15 * 60, // 15 –º–∏–Ω—É—Ç
		Secure:   a.Config.Env != "development",
		HTTPOnly: true,
		SameSite: "Strict",
	})

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh —Ç–æ–∫–µ–Ω –≤ httpOnly cookie
	c.Cookie(&fiber.Cookie{
		Name:     "refresh_token",
		Value:    refreshToken,
		Path:     "/",
		MaxAge:   int(time.Until(expiresAt).Seconds()),
		Secure:   a.Config.Env != "development",
		HTTPOnly: true,
		SameSite: "Strict",
	})

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
		"data": fiber.Map{
			"user": user.ToUserResponse(),
		},
	})
}

// GetMe –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
func (a *AuthController) GetMe(c *fiber.Ctx) error {
	userID := middlewares.GetUserID(c)

	var user models.User
	if err := db.DB.First(&user, userID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"status":  "error",
			"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
			"error":   err.Error(),
		})
	}

	user.FirstName, _ = utils.DecryptString(user.FirstName)
	user.LastName, _ = utils.DecryptString(user.LastName)

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status": "success",
		"data":   user.ToUserResponse(),
	})
}

// UpdateMe –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (a *AuthController) UpdateMe(c *fiber.Ctx) error {
	userID := middlewares.GetUserID(c)

	var user models.User
	if err := db.DB.First(&user, userID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"status":  "error",
			"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
			"error":   err.Error(),
		})
	}

	var input models.UpdateUserDTO
	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
			"error":   err.Error(),
		})
	}

	errors := utils.ValidateStruct(input)
	if len(errors) > 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "error",
			"errors": errors,
		})
	}

	if input.Email != user.Email {
		var existingUser models.User
		result := db.DB.Where("email = ? AND id != ?", input.Email, userID).First(&existingUser)
		if result.RowsAffected > 0 {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"status":  "error",
				"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
			})
		}
	}

	user.Email = input.Email
	user.FirstName = input.FirstName
	user.LastName = input.LastName

	if err := db.DB.Save(&user).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			"error":   err.Error(),
		})
	}

	user.FirstName, _ = utils.DecryptString(user.FirstName)
	user.LastName, _ = utils.DecryptString(user.LastName)

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
		"data":    user.ToUserResponse(),
	})
}

// UpdateUserRole –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
func (a *AuthController) UpdateUserRole(c *fiber.Ctx) error {
	var input models.UpdateRoleDTO

	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
			"error":   err.Error(),
		})
	}

	errors := utils.ValidateStruct(input)
	if len(errors) > 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "error",
			"errors": errors,
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
	if input.Role != models.RoleUser && input.Role != models.RoleAdmin {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å",
		})
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	userID, err := c.ParamsInt("id")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			"error":   err.Error(),
		})
	}

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var user models.User
	if err := db.DB.First(&user, userID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"status":  "error",
			"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
			"error":   err.Error(),
		})
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
	user.Role = input.Role
	if err := db.DB.Save(&user).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			"error":   err.Error(),
		})
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
		"data":    user.ToUserResponse(),
	})
}

// GetUsers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
func (a *AuthController) GetUsers(c *fiber.Ctx) error {
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
	page := c.QueryInt("page", 1)
	limit := c.QueryInt("limit", 10)
	search := c.Query("search", "")

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	if page < 1 {
		page = 1
	}
	if limit < 1 || limit > 100 {
		limit = 10
	}

	offset := (page - 1) * limit

	var users []models.User
	var totalCount int64
	query := db.DB.Model(&models.User{})

	// –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
	if search != "" {
		searchPattern := "%" + search + "%"
		query = query.Where(
			"email LIKE ? OR first_name LIKE ? OR last_name LIKE ?",
			searchPattern, searchPattern, searchPattern,
		)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
	if err := query.Count(&totalCount).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
			"error":   err.Error(),
		})
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
	if err := query.Offset(offset).Limit(limit).Find(&users).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
			"error":   err.Error(),
		})
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –ø–∞—Ä–æ–ª–µ–π
	userResponses := make([]models.UserResponse, len(users))
	for i, user := range users {
		users[i].FirstName, _ = utils.DecryptString(user.FirstName)
		users[i].LastName, _ = utils.DecryptString(user.LastName)
		userResponses[i] = users[i].ToUserResponse()
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status": "success",
		"data":   userResponses,
		"meta": fiber.Map{
			"total":       totalCount,
			"page":        page,
			"limit":       limit,
			"total_pages": int(math.Ceil(float64(totalCount) / float64(limit))),
		},
	})
}

// RequestPasswordReset –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
func (a *AuthController) RequestPasswordReset(c *fiber.Ctx) error {
	var input models.RequestResetDTO

	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
			"error":   err.Error(),
		})
	}

	errors := utils.ValidateStruct(input)
	if len(errors) > 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "error",
			"errors": errors,
		})
	}

	// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	var user models.User
	result := db.DB.Where("email = ?", input.Email).First(&user)
	if result.RowsAffected == 0 {
		// –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"status":  "success",
			"message": "–ï—Å–ª–∏ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã",
		})
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	token := utils.GenerateRandomToken(32)
	expiresAt := time.Now().Add(24 * time.Hour) // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î
	resetToken := models.ResetToken{
		UserID:    user.ID,
		Token:     token,
		ExpiresAt: expiresAt,
		Used:      false,
	}

	if err := db.DB.Create(&resetToken).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
			"error":   err.Error(),
		})
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Ç–æ–∫–µ–Ω–æ–º
	emailBody := utils.GeneratePasswordResetEmail(user.FirstName, token, a.Config)
	emailData := utils.EmailData{
		To:      user.Email,
		Subject: "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –Ω–∞ Finance Hub",
		Body:    emailBody,
	}

	if err := utils.SendEmail(emailData, a.Config); err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		// –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"status":  "success",
			"message": "–ï—Å–ª–∏ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã",
		})
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É",
	})
}

// VerifyResetToken –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
func (a *AuthController) VerifyResetToken(c *fiber.Ctx) error {
	var input models.VerifyTokenDTO

	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
			"error":   err.Error(),
		})
	}

	errors := utils.ValidateStruct(input)
	if len(errors) > 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "error",
			"errors": errors,
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ë–î
	var resetToken models.ResetToken
	result := db.DB.Where("token = ? AND used = ?", input.Token, false).First(&resetToken)
	if result.RowsAffected == 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω",
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
	if time.Now().After(resetToken.ExpiresAt) {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫",
		})
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
	})
}

// ResetPassword —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (a *AuthController) ResetPassword(c *fiber.Ctx) error {
	var input models.ResetPasswordDTO

	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
			"error":   err.Error(),
		})
	}

	errors := utils.ValidateStruct(input)
	if len(errors) > 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "error",
			"errors": errors,
		})
	}

	// –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –≤ –ë–î
	var resetToken models.ResetToken
	result := db.DB.Where("token = ? AND used = ?", input.Token, false).First(&resetToken)
	if result.RowsAffected == 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω",
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
	if time.Now().After(resetToken.ExpiresAt) {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫",
		})
	}

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var user models.User
	if err := db.DB.First(&user, resetToken.UserID).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			"error":   err.Error(),
		})
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
	user.Password = input.NewPassword
	if err := db.DB.Save(&user).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å",
			"error":   err.Error(),
		})
	}

	// –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
	resetToken.Used = true
	db.DB.Save(&resetToken)

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è
	notification := models.Notification{
		UserID:     user.ID,
		Type:       models.NotificationSecurity,
		Title:      "–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω",
		Message:    "–í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
		Importance: models.NotificationHigh,
		IsRead:     false,
	}

	db.DB.Create(&notification)

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω",
	})
}

// RefreshToken –æ–±–Ω–æ–≤–ª—è–µ—Ç JWT —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é refresh —Ç–æ–∫–µ–Ω–∞
func (a *AuthController) RefreshToken(c *fiber.Ctx) error {
	// –ü–æ–ª—É—á–∞–µ–º refresh —Ç–æ–∫–µ–Ω –∏–∑ cookie
	refreshToken := c.Cookies("refresh_token")
	if refreshToken == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "Refresh token –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
	rt, err := utils.ValidateRefreshToken(refreshToken)
	if err != nil {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh token",
			"error":   err.Error(),
		})
	}

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var user models.User
	if err := db.DB.First(&user, rt.UserID).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
			"error":   err.Error(),
		})
	}

	// –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
	if err := utils.InvalidateRefreshToken(refreshToken); err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω",
			"error":   err.Error(),
		})
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω
	accessToken, err := utils.GenerateAccessToken(user.ID, user.Email, user.Role, a.Config)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å access —Ç–æ–∫–µ–Ω",
			"error":   err.Error(),
		})
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
	newRefreshToken, expiresAt, err := utils.GenerateRefreshToken(user.ID)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å refresh —Ç–æ–∫–µ–Ω",
			"error":   err.Error(),
		})
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º access —Ç–æ–∫–µ–Ω –≤ httpOnly cookie
	c.Cookie(&fiber.Cookie{
		Name:     "access_token",
		Value:    accessToken,
		Path:     "/",
		MaxAge:   15 * 60, // 15 –º–∏–Ω—É—Ç
		Secure:   a.Config.Env != "development",
		HTTPOnly: true,
		SameSite: "Strict",
	})

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh —Ç–æ–∫–µ–Ω –≤ httpOnly cookie
	c.Cookie(&fiber.Cookie{
		Name:     "refresh_token",
		Value:    newRefreshToken,
		Path:     "/",
		MaxAge:   int(time.Until(expiresAt).Seconds()),
		Secure:   a.Config.Env != "development",
		HTTPOnly: true,
		SameSite: "Strict",
	})

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
	})
}

// Logout –º–µ—Ç–æ–¥ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—É–∫–∏
func (a *AuthController) Logout(c *fiber.Ctx) error {
	// –ü–æ–ª—É—á–∞–µ–º refresh —Ç–æ–∫–µ–Ω –∏–∑ cookie
	refreshToken := c.Cookies("refresh_token")

	// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–∑—ã–≤–∞–µ–º –µ–≥–æ
	if refreshToken != "" {
		// –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤ –ë–î (–¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –≤–∞–ª–∏–¥–µ–Ω, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
		utils.InvalidateRefreshToken(refreshToken)
	}

	// –£–¥–∞–ª—è–µ–º access_token cookie
	c.Cookie(&fiber.Cookie{
		Name:     "access_token",
		Value:    "",
		Path:     "/",
		MaxAge:   -1,
		HTTPOnly: true,
		SameSite: "Strict",
	})

	// –£–¥–∞–ª—è–µ–º refresh_token cookie
	c.Cookie(&fiber.Cookie{
		Name:     "refresh_token",
		Value:    "",
		Path:     "/",
		MaxAge:   -1,
		HTTPOnly: true,
		SameSite: "Strict",
	})

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
	})
}
