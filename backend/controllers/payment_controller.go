package controllers

import (
	"fmt"
	"log"
	"math/rand"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/nikitagorchakov/finance-hub/backend/db"
	"github.com/nikitagorchakov/finance-hub/backend/middlewares"
	"github.com/nikitagorchakov/finance-hub/backend/models"
	"github.com/nikitagorchakov/finance-hub/backend/utils"
)

// PaymentController –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
type PaymentController struct{}

// NewPaymentController —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π
func NewPaymentController() *PaymentController {
	return &PaymentController{}
}

// GetUserPayments –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (pc *PaymentController) GetUserPayments(c *fiber.Ctx) error {
	userID := middlewares.GetUserID(c)

	var payments []models.Payment
	if err := db.DB.Where("user_id = ?", userID).Order("created_at DESC").
		Preload("Subscription").Find(&payments).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏",
			"error":   err.Error(),
		})
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status": "success",
		"data":   payments,
	})
}

// GetPaymentByID –ø–æ–ª—É—á–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ ID
func (pc *PaymentController) GetPaymentByID(c *fiber.Ctx) error {
	id := c.Params("id")
	userID := middlewares.GetUserID(c)

	var payment models.Payment
	if err := db.DB.Where("id = ? AND user_id = ?", id, userID).
		Preload("Subscription").First(&payment).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"status":  "error",
			"message": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω",
			"error":   err.Error(),
		})
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status": "success",
		"data":   payment,
	})
}

// ProcessPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
func (pc *PaymentController) ProcessPayment(c *fiber.Ctx) error {
	userID := middlewares.GetUserID(c)
	var input struct {
		Plan            string `json:"plan" validate:"required,oneof=basic premium pro"`
		Period          string `json:"period" validate:"required,oneof=monthly yearly lifetime"`
		PaymentMethod   string `json:"paymentMethod" validate:"required"`
		PaymentIntentId string `json:"paymentIntentId" validate:"required"`
	}

	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
			"error":   err.Error(),
		})
	}

	errors := utils.ValidateStruct(input)
	if len(errors) > 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "error",
			"errors": errors,
		})
	}

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
	subscriptionInput := models.SubscriptionCreate{
		Plan:      models.SubscriptionPlan(input.Plan),
		Period:    models.SubscriptionPeriod(input.Period),
		StartDate: time.Now(),
	}

	// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
	db.DB.Model(&models.Subscription{}).
		Where("user_id = ? AND active = ?", userID, true).
		Updates(map[string]interface{}{"active": false})

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
	startDate := subscriptionInput.StartDate
	if startDate.IsZero() {
		startDate = time.Now()
	}

	var endDate *time.Time
	if subscriptionInput.Period != models.LifetimeSubscription {
		var ed time.Time
		if subscriptionInput.Period == models.MonthlySubscription {
			ed = startDate.AddDate(0, 1, 0) // +1 –º–µ—Å—è—Ü
		} else { // Yearly
			ed = startDate.AddDate(1, 0, 0) // +1 –≥–æ–¥
		}
		endDate = &ed
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	price := models.SubscriptionPrices[subscriptionInput.Plan][subscriptionInput.Period]

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
	features := strings.Join(models.PlanFeatures[subscriptionInput.Plan], ", ")

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
	subscription := models.Subscription{
		UserID:    userID,
		Plan:      subscriptionInput.Plan,
		Period:    subscriptionInput.Period,
		StartDate: startDate,
		EndDate:   endDate,
		Active:    true,
		Price:     price,
		Features:  features,
	}

	if err := db.DB.Create(&subscription).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
			"error":   err.Error(),
		})
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
	var user models.User
	db.DB.First(&user, userID)
	firstName, _ := utils.DecryptString(user.FirstName)
	lastName, _ := utils.DecryptString(user.LastName)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
	start := subscription.StartDate.Format("2006-01-02")
	end := "-"
	if subscription.EndDate != nil {
		end = subscription.EndDate.Format("2006-01-02")
	}
	msg := "üÜï –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–æ–ø–ª–∞—Ç–∞)\n" +
		"Email: " + user.Email + "\n" +
		"–ò–º—è: " + firstName + "\n" +
		"–§–∞–º–∏–ª–∏—è: " + lastName + "\n" +
		"–ü–ª–∞–Ω: " + string(subscription.Plan) + "\n" +
		"–ü–µ—Ä–∏–æ–¥: " + string(subscription.Period) + "\n" +
		"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: " + start + "\n" +
		"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: " + end
	utils.SendTelegramMessage(msg)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
	payment := models.Payment{
		UserID:         userID,
		SubscriptionID: subscription.ID,
		Amount:         subscription.Price,
		Currency:       "RUB",
		Status:         models.PaymentSuccess,
		Method:         models.PaymentMethod(input.PaymentMethod),
		PaymentDate:    time.Now(),
		Description:    fmt.Sprintf("–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ %s (%s)", subscription.Plan, subscription.Period),
		TransactionID:  input.PaymentIntentId,
		InvoiceID:      fmt.Sprintf("INV-%d-%03d", time.Now().Year(), rand.Intn(1000)),
	}

	if err := db.DB.Create(&payment).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂",
			"error":   err.Error(),
		})
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ
	notification := models.Notification{
		UserID:     userID,
		Type:       models.NotificationPayment,
		Title:      "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞",
		Message:    fmt.Sprintf("–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ %s —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞. –°—É–º–º–∞: %.2f %s", subscription.Plan, payment.Amount, payment.Currency),
		Importance: models.NotificationNormal,
		IsRead:     false,
		Data:       fmt.Sprintf(`{"paymentId": %d, "amount": %.2f, "subscriptionId": %d}`, payment.ID, payment.Amount, payment.SubscriptionID),
	}

	if err := db.DB.Create(&notification).Error; err != nil {
		log.Printf("Failed to create payment notification: %v", err)
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
		"data": fiber.Map{
			"payment":      payment,
			"subscription": subscription,
		},
	})
}

// RefundPayment –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–Ω—å–≥–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É (–∏–º–∏—Ç–∞—Ü–∏—è)
func (pc *PaymentController) RefundPayment(c *fiber.Ctx) error {
	id := c.Params("id")
	userID := middlewares.GetUserID(c)

	var payment models.Payment
	if err := db.DB.Where("id = ? AND user_id = ?", id, userID).
		Preload("Subscription").First(&payment).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"status":  "error",
			"message": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω",
			"error":   err.Error(),
		})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º
	if payment.Status != models.PaymentSuccess {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π",
		})
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
	payment.Status = models.PaymentRefunded
	db.DB.Save(&payment)

	// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	var subscription models.Subscription
	db.DB.First(&subscription, payment.SubscriptionID)
	if subscription.ID != 0 {
		subscription.Active = false
		db.DB.Save(&subscription)
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞
	notification := models.Notification{
		UserID:     userID,
		Type:       models.NotificationPayment,
		Title:      "–í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω",
		Message:    fmt.Sprintf("–í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —Å—É–º–º—É %.2f %s —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω", payment.Amount, payment.Currency),
		Importance: models.NotificationHigh,
		IsRead:     false,
		Data:       fmt.Sprintf(`{"paymentId": %d, "amount": %.2f, "subscriptionId": %d}`, payment.ID, payment.Amount, payment.SubscriptionID),
	}

	if err := db.DB.Create(&notification).Error; err != nil {
		log.Printf("Failed to create refund notification: %v", err)
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω",
		"data":    payment,
	})
}
