package controllers

import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/nikitagorchakov/finance-hub/backend/db"
	"github.com/nikitagorchakov/finance-hub/backend/middlewares"
	"github.com/nikitagorchakov/finance-hub/backend/models"
	"github.com/nikitagorchakov/finance-hub/backend/utils"
)

// SubscriptionController –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
type SubscriptionController struct{}

// NewSubscriptionController —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫
func NewSubscriptionController() *SubscriptionController {
	return &SubscriptionController{}
}

// GetAllPlans –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏
func (sc *SubscriptionController) GetAllPlans(c *fiber.Ctx) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
	var plans []models.PlanInfo

	for plan, periods := range models.SubscriptionPrices {
		for period, price := range periods {
			description := ""
			switch plan {
			case models.Basic:
				description = "–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤"
			case models.Premium:
				description = "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–ª–∞–Ω —Å –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏"
			case models.Pro:
				description = "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
			}

			plans = append(plans, models.PlanInfo{
				Plan:        plan,
				Period:      period,
				Price:       price,
				Description: description,
				Features:    models.PlanFeatures[plan],
			})
		}
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status": "success",
		"data":   plans,
	})
}

// GetUserSubscription –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (sc *SubscriptionController) GetUserSubscription(c *fiber.Ctx) error {
	userID := middlewares.GetUserID(c)

	var subscription models.Subscription
	if err := db.DB.Where("user_id = ? AND active = ?", userID, true).
		Order("created_at DESC").First(&subscription).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"status":  "error",
			"message": "–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
		})
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É features –≤ –º–∞—Å—Å–∏–≤
	var features []string
	if subscription.Features != "" {
		features = strings.Split(subscription.Features, ", ")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
	now := time.Now()
	if subscription.EndDate != nil && now.After(*subscription.EndDate) {
		subscription.Active = false
		db.DB.Save(&subscription)

		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"status":  "success",
			"message": "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞",
			"data": fiber.Map{
				"subscription": subscription,
				"features":     features,
				"expired":      true,
			},
		})
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status": "success",
		"data": fiber.Map{
			"subscription": subscription,
			"features":     features,
		},
	})
}

// SubscribeUser –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
func (sc *SubscriptionController) SubscribeUser(c *fiber.Ctx) error {
	userID := middlewares.GetUserID(c)
	var input models.SubscriptionCreate

	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
			"error":   err.Error(),
		})
	}

	errors := utils.ValidateStruct(input)
	if len(errors) > 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "error",
			"errors": errors,
		})
	}

	// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
	db.DB.Model(&models.Subscription{}).
		Where("user_id = ? AND active = ?", userID, true).
		Updates(map[string]interface{}{"active": false})

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
	startDate := input.StartDate
	if startDate.IsZero() {
		startDate = time.Now()
	}

	var endDate *time.Time
	if input.Period != models.LifetimeSubscription {
		var ed time.Time
		if input.Period == models.MonthlySubscription {
			ed = startDate.AddDate(0, 1, 0) // +1 –º–µ—Å—è—Ü
		} else { // Yearly
			ed = startDate.AddDate(1, 0, 0) // +1 –≥–æ–¥
		}
		endDate = &ed
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	price := models.SubscriptionPrices[input.Plan][input.Period]

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
	features := strings.Join(models.PlanFeatures[input.Plan], ", ")

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
	subscription := models.Subscription{
		UserID:    userID,
		Plan:      input.Plan,
		Period:    input.Period,
		StartDate: startDate,
		EndDate:   endDate,
		Active:    true,
		Price:     price,
		Features:  features,
	}

	if err := db.DB.Create(&subscription).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
			"error":   err.Error(),
		})
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
	var user models.User
	db.DB.First(&user, userID)
	firstName, _ := utils.DecryptString(user.FirstName)
	lastName, _ := utils.DecryptString(user.LastName)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
	start := subscription.StartDate.Format("2006-01-02")
	end := "-"
	if subscription.EndDate != nil {
		end = subscription.EndDate.Format("2006-01-02")
	}
	msg := "üÜï –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n" +
		"Email: " + user.Email + "\n" +
		"–ò–º—è: " + firstName + "\n" +
		"–§–∞–º–∏–ª–∏—è: " + lastName + "\n" +
		"–ü–ª–∞–Ω: " + string(subscription.Plan) + "\n" +
		"–ü–µ—Ä–∏–æ–¥: " + string(subscription.Period) + "\n" +
		"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: " + start + "\n" +
		"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: " + end
	fmt.Println(msg)
	utils.SendTelegramMessage(msg)

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
	notification := models.Notification{
		UserID:     userID,
		Type:       models.NotificationSubscription,
		Title:      fmt.Sprintf("–ü–æ–¥–ø–∏—Å–∫–∞ %s –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", input.Plan),
		Message:    fmt.Sprintf("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ %s —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. %s", input.Plan, subscription.Features),
		Importance: models.NotificationHigh,
		IsRead:     false,
		Data:       fmt.Sprintf(`{"subscriptionId": %d, "plan": "%s", "endDate": "%s"}`, subscription.ID, subscription.Plan, subscription.EndDate.Format(time.RFC3339)),
	}

	if err := db.DB.Create(&notification).Error; err != nil {
		log.Printf("Failed to create subscription notification: %v", err)
	}

	return c.Status(fiber.StatusCreated).JSON(fiber.Map{
		"status":  "success",
		"message": "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞",
		"data":    subscription,
	})
}

// CancelSubscription –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (sc *SubscriptionController) CancelSubscription(c *fiber.Ctx) error {
	userID := middlewares.GetUserID(c)

	var subscription models.Subscription
	if err := db.DB.Where("user_id = ? AND active = ?", userID, true).
		First(&subscription).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"status":  "error",
			"message": "–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
		})
	}

	// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription.Active = false
	if err := db.DB.Save(&subscription).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status":  "error",
			"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
			"error":   err.Error(),
		})
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
	notification := models.Notification{
		UserID:     userID,
		Type:       models.NotificationSubscription,
		Title:      "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
		Message:    fmt.Sprintf("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ %s –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—â–µ–Ω –ø–æ—Å–ª–µ %s", subscription.Plan, subscription.EndDate.Format("02.01.2006")),
		Importance: models.NotificationNormal,
		IsRead:     false,
		Data:       fmt.Sprintf(`{"subscriptionId": %d, "plan": "%s", "endDate": "%s"}`, subscription.ID, subscription.Plan, subscription.EndDate.Format(time.RFC3339)),
	}

	if err := db.DB.Create(&notification).Error; err != nil {
		log.Printf("Failed to create subscription cancellation notification: %v", err)
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"message": "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞",
		"data":    subscription,
	})
}
