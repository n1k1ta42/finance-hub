package utils

import (
	"fmt"
	"log"

	"github.com/nikitagorchakov/finance-hub/backend/db"
	"github.com/nikitagorchakov/finance-hub/backend/models"
	"github.com/nikitagorchakov/finance-hub/backend/telegram"
)

// CheckBudgetThresholds –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –±—é–¥–∂–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func CheckBudgetThresholds(userID uint) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var budgets []models.Budget
	if err := db.DB.Where("user_id = ?", userID).
		Preload("Category").
		Find(&budgets).Error; err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–≤: %w", err)
	}

	for _, budget := range budgets {
		if err := checkSingleBudgetThresholds(&budget); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—é–¥–∂–µ—Ç–∞ %d: %v", budget.ID, err)
		}
	}

	return nil
}

// checkSingleBudgetThresholds –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
func checkSingleBudgetThresholds(budget *models.Budget) error {
	exceededThresholds := budget.GetThresholdStatus()
	
	for _, threshold := range exceededThresholds {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞
		if hasNotificationBeenSent(budget.ID, threshold) {
			continue
		}

		notification := createBudgetNotification(budget, threshold)
		if err := db.DB.Create(&notification).Error; err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %w", err)
		}

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		var user models.User
		if err := db.DB.First(&user, budget.UserID).Error; err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", budget.UserID, err)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω chat ID
		if user.TelegramChatID != "" {
			telegramMessage := formatTelegramBudgetMessage(budget, threshold)
			
			// –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞
			telegramService, err := telegram.GetInstance()
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram —Å–µ—Ä–≤–∏—Å–∞: %v", err)
			} else {
				if err := telegramService.SendNotification(user.TelegramChatID, telegramMessage); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", user.ID, err)
				} else {
					log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞ %s –Ω–∞ %.0f%%", user.ID, budget.Name, threshold)
				}
			}
		}

		log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞ %s –Ω–∞ %.0f%%", budget.Name, threshold)
	}

	return nil
}

// hasNotificationBeenSent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –∏ –ø–æ—Ä–æ–≥–∞
func hasNotificationBeenSent(budgetID uint, threshold float64) bool {
	var count int64
	dataPattern := fmt.Sprintf(`%%"budgetId": %d%%"threshold": %.0f%%`, budgetID, threshold)
	
	db.DB.Model(&models.Notification{}).
		Where("type = ? AND data LIKE ?", models.NotificationBudget, dataPattern).
		Count(&count)
	
	return count > 0
}

// createBudgetNotification —Å–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞
func createBudgetNotification(budget *models.Budget, threshold float64) models.Notification {
	title, message, importance := getBudgetNotificationContent(budget, threshold)
	
	return models.Notification{
		UserID:     budget.UserID,
		Type:       models.NotificationBudget,
		Title:      title,
		Message:    message,
		Importance: importance,
		IsRead:     false,
		Data:       fmt.Sprintf(`{"budgetId": %d, "threshold": %.0f, "usage": %.2f, "amount": %.2f, "spent": %.2f}`, 
			budget.ID, threshold, budget.GetUsagePercentage(), budget.Amount, budget.Spent),
	}
}

// getBudgetNotificationContent –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä–æ–≥–∞
func getBudgetNotificationContent(budget *models.Budget, threshold float64) (string, string, models.NotificationImportance) {
	categoryName := "–û–±—â–∏–π"
	if budget.Category != nil {
		categoryName = budget.Category.Name
	}

	usage := budget.GetUsagePercentage()
	
	switch threshold {
	case 80:
		return "‚ö†Ô∏è –ë—é–¥–∂–µ—Ç –Ω–∞ 80%",
			fmt.Sprintf("–ë—é–¥–∂–µ—Ç \"%s\" (%s) –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω –Ω–∞ %.1f%%. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f‚ÇΩ –∏–∑ %.2f‚ÇΩ", 
				budget.Name, categoryName, usage, budget.Spent, budget.Amount),
			models.NotificationNormal
	case 100:
		return "üö® –ë—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!",
			fmt.Sprintf("–ë—é–¥–∂–µ—Ç \"%s\" (%s) –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ %.1f%%! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f‚ÇΩ –∏–∑ %.2f‚ÇΩ", 
				budget.Name, categoryName, usage-100, budget.Spent, budget.Amount),
			models.NotificationHigh
	case 120:
		return "üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ!",
			fmt.Sprintf("–ë—é–¥–∂–µ—Ç \"%s\" (%s) –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ %.1f%%! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f‚ÇΩ –∏–∑ %.2f‚ÇΩ", 
				budget.Name, categoryName, usage-100, budget.Spent, budget.Amount),
			models.NotificationHigh
	default:
		return "üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—é–¥–∂–µ—Ç–µ",
			fmt.Sprintf("–ë—é–¥–∂–µ—Ç \"%s\" (%s) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞ %.1f%%", budget.Name, categoryName, usage),
			models.NotificationNormal
	}
}

// formatTelegramBudgetMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
func formatTelegramBudgetMessage(budget *models.Budget, threshold float64) string {
	categoryName := "–û–±—â–∏–π"
	if budget.Category != nil {
		categoryName = budget.Category.Name
	}

	usage := budget.GetUsagePercentage()
	
	switch threshold {
	case 80:
		return fmt.Sprintf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±—é–¥–∂–µ—Ç–µ\n\n–ë—é–¥–∂–µ—Ç: %s (%s)\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %.1f%%\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f‚ÇΩ –∏–∑ %.2f‚ÇΩ\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", 
			budget.Name, categoryName, usage, budget.Spent, budget.Amount)
	case 100:
		return fmt.Sprintf("üö® –ü–†–ï–í–´–®–ï–ù–ò–ï –ë–Æ–î–ñ–ï–¢–ê!\n\n–ë—é–¥–∂–µ—Ç: %s (%s)\n–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: %.1f%%\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f‚ÇΩ –∏–∑ %.2f‚ÇΩ\n\n–í–ù–ò–ú–ê–ù–ò–ï! –ë—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!", 
			budget.Name, categoryName, usage-100, budget.Spent, budget.Amount)
	case 120:
		return fmt.Sprintf("üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–í–´–®–ï–ù–ò–ï!\n\n–ë—é–¥–∂–µ—Ç: %s (%s)\n–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: %.1f%%\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f‚ÇΩ –∏–∑ %.2f‚ÇΩ\n\nüö® –°–†–û–ß–ù–û –¢–†–ï–ë–£–ï–¢–°–Ø –ö–û–ù–¢–†–û–õ–¨ –†–ê–°–•–û–î–û–í!", 
			budget.Name, categoryName, usage-100, budget.Spent, budget.Amount)
	default:
		return fmt.Sprintf("üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—é–¥–∂–µ—Ç–µ\n\n–ë—é–¥–∂–µ—Ç: %s (%s)\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %.1f%%\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f‚ÇΩ –∏–∑ %.2f‚ÇΩ", 
			budget.Name, categoryName, usage, budget.Spent, budget.Amount)
	}
} 